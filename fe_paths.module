<?php
/**
 * @file
 * Contains functions for the File Entity Paths module.
 */

/**
 * Implements hook_menu().
 */
function fe_paths_menu() {
  // Attach a "Manage file paths" tab to each file type in the same way that
  // Field UI attaches "Manage fields" and "Manage display" tabs. Note that
  // Field UI does not have to be enabled; we're just using the same IA pattern
  // here for attaching the "Manage file display" page.
  $entity_info = entity_get_info('file');
  foreach ($entity_info['bundles'] as $file_type => $bundle_info) {
    if (isset($bundle_info['admin'])) {
      // Get the base path and access.
      $path = $bundle_info['admin']['path'];
      $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
      $access += array(
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),
      );

      // The file type must be passed to the page callbacks. It might be
      // configured as a wildcard (multiple file types sharing the same menu
      // router path).
      $file_type_argument = isset($bundle_info['admin']['bundle argument']) ? $bundle_info['admin']['bundle argument'] : $file_type;

      // Add the 'Manage file paths' tab.
      $items["$path/file-paths"] = array(
        'title' => 'Manage file paths',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fe_paths_admin_form', $file_type_argument),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5,
        'file' => 'fe_paths.admin.inc',
        'file path' => drupal_get_path('module', 'fe_paths') . '/includes',
      ) + $access;
    }
  }
  return $items;
}

/**
 * Get all variables defined by File Entity Paths
 *
 * @param $file_type
 *   The bundle name of file, eg. image, application
 *
 * @return $settings
 *   An array of variables.If $file_type set, only returns the settings of
 *   $file_type
 */
function fe_paths_get_settings($file_type = NULL) {
  $settings = &drupal_static(__FUNCTION__);

  if (!isset($vars)) {
    $entity_info = entity_get_info('file');
    foreach ($entity_info['bundles'] as $type => $bundle_info) {
      if (isset($bundle_info['admin'])) {
        $defaults = array(
          'default' => array(
            'path' => '',
            'filename' => '[file:name-only-original].[file:extension-original]',
          ),
          'private' => array(
            'path' => '',
            'filename' => '[file:name-only-original].[file:extension-original]',
          ),
        );
        $vars = variable_get("fep_$type", $defaults);
        $settings[$type] = array(
          'default' => $vars['default'],
          'private' => $vars['private'],
        );
      }
    }
  }
  return is_null($file_type) ? $settings : $settings[$file_type];
}

/**
 * Implements hook_file_presave().
 */
function fe_paths_file_presave($file) {
  // Store original filename in the database.
  if (empty($file->origname)) {
    $file->origname = $file->filename;
  }
  fe_paths_file_process($file);
}

/**
 * Actually processes the files.
 * @see fe_paths_file_presave().
 * @see fe_paths_move_files().
 */
function fe_paths_file_process($file) {
  // Get a static of processed files to prevent infinite processing.
  $processed = &drupal_static(__FUNCTION__, array());

  // Only work on local files, that have not been processed, and that already have a file_entity type.
  if (file_entity_file_is_local($file) && !array_key_exists($file->origname, $processed) && isset($file->type)) {
    $settings = fe_paths_get_settings($file->type);
    $scheme = file_uri_scheme($file->uri);
    $private = $scheme == 'private' ? TRUE : FALSE;
    $old_dir_uri = str_replace('/' . $file->filename, '', $file->uri);

    if ($private) {
      $replace_path = $settings['private']['path'];
      $replace_filename = $settings['private']['filename'];
    }
    else {
      $replace_path = $settings['default']['path'];
      $replace_filename = $settings['default']['filename'];
    }

    // First process tokens
    $path = token_replace($replace_path, array('file' => $file, 'file'), array('clear' => TRUE));
    $filename = token_replace($replace_filename, array('file' => $file, 'file'), array('clear' => TRUE));

    $paths = $path != '' ? explode('/', $path) : NULL;

    $new_uri = $scheme . '://' . $path . $filename;
    // Move the files, if necessary
    if ($file->uri != $new_uri) {
      $directory = $scheme . '://' . $path;
      drupal_register_shutdown_function('fe_paths_move_files', $directory, $file, $new_uri, $filename, $old_dir_uri);
    }
    $processed[$file->origname] = TRUE;
  }
}

/**
 * A function that can be called in the page shutdown to actually move files. Not safe against recursion.
 */
function fe_paths_move_files($directory, $file, $new_uri, $filename, $old_dir_uri) {
  // Create directory, if necessary.
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  if (file_move($file, $new_uri)) {
    // Because of file_move works with a cloned $file object, need to update
    // this $file object.
    $file->filename = $filename;
    $file->uri = $new_uri;

    // Check, if directory is empty, and delete it, if yes
    $files = file_scan_directory($old_dir_uri, '/.*/');
    if (file_exists($old_dir_uri) && empty($files)) {
      drupal_rmdir($old_dir_uri);
     }
   }
 }

/**
 * Implements hook_token_info().
 */
function fe_paths_token_info() {
  $info['tokens']['file']['name-only'] = array(
    'name' => t("File name"),
    'description' => t("File name without extension."),
  );
  $info['tokens']['file']['name-only-original'] = array(
    'name' => t("File name - original"),
    'description' => t("File name without extension - original."),
  );
  $info['tokens']['file']['extension-original'] = array(
    'name' => t("File extension - original"),
    'description' => t("File extension - original."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function fe_paths_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);
  if (isset($language)) {
    $url_options['language'] = $language;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'file' && !empty($data['file'])) {
    $file = $data['file'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name-only':
          $info = pathinfo($file->filename);
          $replacements[$original] = $info['filename'];
          break;

        case 'name-only-original':
          $info = pathinfo($file->origname);
          $replacements[$original] = $info['filename'];
          break;

        case 'extension-original':
          $info = pathinfo($file->origname);
          // Devel themer provides files with no extensions. @todo: test how
          // will this work.
          $replacements[$original] = isset($info['extension']) ? $info['extension'] : '';
          break;
      }
    }
  }

  return $replacements;
}


