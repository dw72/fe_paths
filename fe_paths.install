<?php
/**
 * @file
 * Install, update and uninstall functions for the File Entity Paths module.
 * @todo: Figure out, how should this work with Filefield Paths.
 *   Now, the filefield_paths has partial media + File Entity support
 */

/**
 * Implements hook_schema().
 */
function fe_paths_schema() {
  $schema['fe_paths_config'] = array(
    'description' => 'Table definition for fe_paths config entity schema. ',
    'fields' => array(
      'id' => array(
        'description' => 'The unique identifier for config.',
        'not null' => TRUE,
        'type' => 'serial',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'description' => 'The machine name of the configuration.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The label of the configuration.',
        'default' => 'unlabeled',
      ),
      'active' => array(
        'description' => 'Boolean indicating whether the configuration is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Weight of the settings.',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The path of this config.',
        'default' => 'unlabeled',
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The filename of this config.',
        'default' => 'unlabeled',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'The configuration data, serialized.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  
  return $schema;
}
/**
 * Implements hook_schema_alter().
 *
 * @param $schema
 *   The system-wide schema
 */
function fe_paths_schema_alter(&$schema) {
  $schema['file_managed']['fields']['origname'] = array(
    'description' => 'Original name of the file.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
}

/**
 * Implements hook_install().
 */
function fe_paths_install() {
  // Add origname field to {file_managed}, and populate with the current
  // filenames.
  db_add_field('file_managed', 'origname', array(
    'description' => 'Original name of the file with no path components. Used by the fe_paths module.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
  db_update('file_managed')
    ->expression('origname', 'filename')
    ->execute();

  // Set the weight to 1.
  db_update('system')
    ->fields(array('weight' => 1))
    ->condition('type', 'module')
    ->condition('name', 'fe_paths')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function fe_paths_uninstall() {
  db_drop_field('file_managed', 'origname');
}

/**
 * Implements hook_update_N();
 *
 * Create missing database table to store fe_paths configuration.
 */
function fe_paths_update_7000() {
  $schema['fe_paths_config'] = array(
    'description' => 'Table definition for fe_paths config entity schema. ',
    'fields' => array(
      'id' => array(
        'description' => 'The unique identifier for config.',
        'not null' => TRUE,
        'type' => 'serial',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'description' => 'The machine name of the configuration.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The label of the configuration.',
        'default' => 'unlabeled',
      ),
      'active' => array(
        'description' => 'Boolean indicating whether the configuration is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Weight of the settings.',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The path of this config.',
        'default' => 'unlabeled',
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The filename of this config.',
        'default' => 'unlabeled',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'The configuration data, serialized.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  db_create_table('fe_paths_config', $schema['fe_paths_config']);
  return t('The table for configuration created successful.');
}
